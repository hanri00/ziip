import java.io.*;
import java.util.*;

class UserSolution {
	
	static int playerCnt; // N
	static int leagueCnt; // L 
	static int[] ability; 
	static int[] league; 
	static int[] middle; 
	
	// 전체
	static PriorityQueue<Integer>[]maxpq; 
	static PriorityQueue<Integer>[]minpq; 
	
	// 절반
	static PriorityQueue<Integer>[]left; 
	static PriorityQueue<Integer>[]right; 
	
	static class maxcmp implements Comparator <Integer>{
		@Override
		public int compare(Integer a, Integer b) {
			if(ability[a] > ability[b]) return -1;
			if(ability[a] < ability[b]) return 1;
			if(a < b) return -1;
			if(a > b) return 1; 
			return 0; 
		}
	}
	
	static class mincmp implements Comparator <Integer>{
		@Override
		public int compare(Integer a, Integer b) {
			if(ability[a] < ability[b]) return -1;
			if(ability[a] > ability[b]) return 1;
			if(a > b) return -1;
			if(a < b) return 1; 
			return 0; 
		}
	}
	
	static boolean compareID(int a, int b) {
		if(ability[a] > ability[b]) return true;
		if(ability[a] < ability[b]) return false;
		if(a < b) return true;
		if(a > b) return false; 
		return false; 
	}
	
	static void update(int leagueNum) {
		while(true) {
			while(league[left[leagueNum].peek()] != leagueNum)
				left[leagueNum].remove(); 
			while(league[right[leagueNum].peek()] != leagueNum)
				right[leagueNum].remove();
			
			if(compareID(left[leagueNum].peek(), middle[leagueNum])) {
				if(compareID(middle[leagueNum], right[leagueNum].peek())) { 
					break; 
				}
			}
		
			if(compareID(left[leagueNum].peek(), middle[leagueNum]) == false) {
				int temp = left[leagueNum].remove();
				left[leagueNum].add(middle[leagueNum]);
				middle[leagueNum] = temp; 
				if(left[leagueNum].peek() == middle[leagueNum])
					left[leagueNum].remove(); 
			}

			if(compareID(middle[leagueNum], right[leagueNum].peek()) == false) {
				int temp = middle[leagueNum];
				middle[leagueNum] = right[leagueNum].remove(); 
				right[leagueNum].add(temp);
				if(right[leagueNum].peek() == middle[leagueNum])
					right[leagueNum].remove(); 
			}
		}
	}

	public void init(int N, int L, int[] mAbility) {
		playerCnt = N;
		leagueCnt = L; 
		int leagueCapacity = N / L; 
		
		maxpq = new PriorityQueue[L];
		minpq = new PriorityQueue[L];
		left = new PriorityQueue[L];
		right = new PriorityQueue[L];
		
		ability = new int[N]; 
		league = new int[N]; 
		middle = new int[L]; 
		
		for(int i = 0; i < L; i++) {
			minpq[i] = new PriorityQueue<>(new mincmp());
			maxpq[i] = new PriorityQueue<>(new maxcmp());
			left[i] = new PriorityQueue<>(new mincmp());
			right[i] = new PriorityQueue<>(new maxcmp());
			middle[i] = -1;
		}
		
		for(int i = 0; i < N; i++) {
			ability[i] = mAbility[i];
			int leagueNum = i / leagueCapacity;
			league[i] = leagueNum;
			maxpq[leagueNum].add(i);
			minpq[leagueNum].add(i);
		}
		
		int num = 0; 
		for(int i = 0; i < L; i++) {
			for(int j = 0; j < leagueCapacity/2; j++) {
				left[i].add(num);
				num++; 
			}
			middle[i] = num++;
			for(int j = 0; j < leagueCapacity/2; j++) {
				right[i].add(num);
				num++; 
			}
		}
	
		for(int i = 0; i < L; i++)
			update(i); 
		
		return;
	}

	public int move() {
		int[] low = new int[leagueCnt];
		int[] high = new int[leagueCnt];
		int res = 0;
		
		for(int i = 0; i < leagueCnt-1; i++) {
			
			while(league[minpq[i].peek()] != i)
				minpq[i].remove();
			while(league[maxpq[i+1].peek()] != i+1)
				maxpq[i+1].remove(); 
			
			low[i] = minpq[i].peek(); 
			high[i] = maxpq[i+1].peek();
			res += low[i] + high[i]; 
		}
		
		for(int i = 0; i < leagueCnt -1; i++) {
			league[high[i]] = i;
			maxpq[i].add(high[i]);
			minpq[i].add(high[i]); 
			
			if(ability[high[i]] >= ability[low[i]]) {
				int temp = middle[i];
				middle[i] = high[i];
				right[i].add(temp); 
			}
			else 
				right[i].add(high[i]);
			
			league[low[i]] = i+1;
			maxpq[i+1].add(low[i]);
			minpq[i+1].add(low[i]); 
			
			if(ability[low[i]] >= ability[high[i]]) {
				left[i+1].add(low[i]);
			}
			else {
				int temp = middle[i+1];
				middle[i+1] = low[i];
				left[i+1].add(temp); 
			}
		}
		
		for(int i = 0; i < leagueCnt; i++)
			update(i); 
		
		return res;
	}

	public int trade() {
		
		int[] mid = new int[leagueCnt];
		int[] high = new int[leagueCnt];
		int res = 0; 
		
		for(int i = 0; i < leagueCnt-1; i++) {
			while(league[maxpq[i+1].peek()] != i+1)
				maxpq[i+1].remove();
			mid[i] = middle[i];
			high[i] = maxpq[i+1].peek();
			res += mid[i] + high[i]; 
		}
		
		for(int i = 0; i < leagueCnt-1; i++) {
			league[high[i]] = i;
			maxpq[i].add(high[i]);
			minpq[i].add(high[i]);
			
			middle[i] = high[i]; 
			
			league[mid[i]] = i+1;
			maxpq[i+1].add(mid[i]);
			minpq[i+1].add(mid[i]);
			left[i+1].add(mid[i]);
		}
		
		for(int i = 0; i < leagueCnt; i++)
			update(i);
		
		return res;
	}
}