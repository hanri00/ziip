import java.io.*;
import java.util.*;

// string

public class Main {
	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	static StringTokenizer st;
	static int N,Q;
	static int vals[];
	static int tree[];
	static int init(int st, int ed, int node) {
		if(st == ed)return tree[node] = vals[st];
		int mid = (st+ed)/2;
		return tree[node] = Math.min(init(st, mid, node*2), init(mid+1, ed, node*2+1));
	}
	
	static int getmin(int st, int ed, int node, int left, int right) {
		if(ed < left || right < st)return Integer.MAX_VALUE;
		if(left <= st && ed <=right)return tree[node];
		int mid = (st+ed)/2;
		return Math.min(getmin(st, mid, node*2, left, right), getmin(mid+1, ed, node*2+1, left, right));
				
	}
	
	public static void main(String[] args) throws IOException {
		/*
		 * 10 10
48 -17 31 -8 16 46 29 -34 -6 -25 
5 9
1 7
4 8
2 3
5 10
3 5
6 8
3 6
1 6
2 7
		 */
		st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		Q = Integer.parseInt(st.nextToken());
		vals = new int[N];
		tree = new int[N*4];
		st = new StringTokenizer(br.readLine());
		for(int i =0; i<N; i++) {
			vals[i] = Integer.parseInt(st.nextToken());
		}
		init(0,N-1, 1);
		for(int i=0; i<Q; i++) {
			st = new StringTokenizer(br.readLine());
			int left = Integer.parseInt(st.nextToken());
			int right = Integer.parseInt(st.nextToken());
			System.out.println(getmin(0, N-1, 1, left-1, right-1));
		}
	}
}