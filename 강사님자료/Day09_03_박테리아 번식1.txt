import java.io.*;
import java.util.*;

class UserSolution {
	
	class Coord implements Comparable<Coord>{
		int row, col, dist;
		Coord(int row, int col) {
			this.row = row;
			this.col = col;
			this.dist = 0;
		}
		Coord(int row, int col, int dist) {
			this.row = row;
			this.col = col;
			this.dist = dist;
		}
		@Override
		public int compareTo(Coord right) {
			if (dist < right.dist) return -1;
			if (dist > right.dist) return 1;
	        if (row < right.row) return -1;
	        if (row > right.row) return 1;
	        if (col < right.col) return -1;
	        if (col > right.col) return 1;
			return 0;
		}
	}
	class Bacteria{
		int id, size, time;
		boolean isActivate;

		Bacteria(int id) {
			super();
			this.id = -1;
			this.size = -1;
			this.time = -1;
			this.isActivate = false;
		}

		Bacteria(Main.Bacteria initData, int mTime) {
			this.id = initData.id;
			this.size = initData.size;
			this.time = initData.time + mTime;
			this.isActivate = false;
		}
	}
	int N;
	int[][] MAP;
	Bacteria[] bacterias;
	ArrayDeque<Integer> aliveList;
	int nowTime;
	
	void simulation(int mTime) {
		nowTime = mTime;
		int len = aliveList.size();
		for(int i = 0; i < len; i++) {
			int now = aliveList.removeFirst();
			if(bacterias[now].time <= nowTime) bacterias[now].isActivate = false;
			if(bacterias[now].isActivate) aliveList.addLast(now);
		}
	}
	
	int getDistance(Coord src, Coord dest) { // 시작좌표, next
	    return Math.abs(src.row - dest.row) + Math.abs(src.col - dest.col);
	}
	
    public void init(int N) {
    	this.N = N;
    	MAP = new int[N + 2][N + 2];
    	bacterias = new Bacteria[3001];
    	for(int i = 0; i < 3001; i++)
    		bacterias[i] = new Bacteria(i);
    	nowTime = 0;
    	aliveList = new ArrayDeque<>();
    }

    public Main.Result putBacteria(int mTime, int mRow, int mCol, Main.Bacteria mBac) {
    	simulation(mTime);
    	
    	Main.Result ret = new Main.Result(); 	
    	
    	if(bacterias[MAP[mRow][mCol]].isActivate) return ret;
    	Bacteria newBacteria = new Bacteria(mBac, mTime);
    	
    	int[][] visited = new int[N + 2][N + 2];
    	PriorityQueue<Coord> pq = new PriorityQueue<>();

    	Coord firstPos = new Coord(mRow, mCol);
    	Coord lastPos = firstPos;
    	pq.add(firstPos);
    	visited[mRow][mCol] = 1;
    	int cnt = 0;
    	
    	while(!pq.isEmpty()) {
    		Coord now = pq.remove();
    		MAP[now.row][now.col] = newBacteria.id;
    		cnt++;
    		lastPos = now;
    		
    		if(cnt >= newBacteria.size) break;
    		
    		int[] dr = {-1,1,0,0};
    		int[] dc = {0,0,-1,1};
    		for(int i = 0; i < 4; i++) {
    			Coord nxt = new Coord(now.row + dr[i], now.col + dc[i]);
    			nxt.dist = getDistance(firstPos, nxt);
    			if(nxt.row <= 0 || nxt.col <= 0 || nxt.row > N || nxt.col > N)
    				continue;
    			if(visited[nxt.row][nxt.col] != 0)
    				continue;
    			if(bacterias[ MAP[nxt.row][nxt.col] ].isActivate)
    				continue;
    			
    			visited[nxt.row][nxt.col] = 1;
    			pq.add(nxt);
    		}
    	}
    	
    	if(cnt >= newBacteria.size) {
    		newBacteria.isActivate = true;
    		bacterias[newBacteria.id] = newBacteria;
    		aliveList.add(newBacteria.id);
    		ret.row = lastPos.row;
    		ret.col = lastPos.col;
    	}
    	
        return ret;
    }
    
    public int killBacteria(int mTime, int mRow, int mCol) {
    	simulation(mTime);
    	
    	int id = MAP[mRow][mCol];
    	if(!bacterias[id].isActivate) return 0;
    	bacterias[id].isActivate = false;
    	return id; 
    }
    
    public int checkCell(int mTime, int mRow, int mCol) {
    	simulation(mTime);

    	int id = MAP[mRow][mCol];
    	if(!bacterias[id].isActivate) return 0;
    	return id; 
    }
}