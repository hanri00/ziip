import java.io.*;
import java.util.*;

public class Main {
	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	
	class Coord implements Comparable<Coord>{
		int row;
		int col;
		public Coord(int row, int col) {
			super();
			this.row = row;
			this.col = col;
		}
		@Override
		public int compareTo(Coord right) {
			// return -1 : 내가 우선순위가 높은 경우
			// return 1 : 내가 우선순위가 낮은 경우
			if(this.row < right.row) return -1;
			if(this.row > right.row) return 1;
			
			if(this.col < right.col) return -1;
			if(this.col > right.col) return 1;
			
			return 0;
		}
	}
	
	public static void main(String[] args) throws IOException {
		//PriorityQueue<Integer> pq = new PriorityQueue<>(); 
		PriorityQueue<Integer> pq = new PriorityQueue<>( Collections.reverseOrder() );
		// 우선순위 큐 <- 가장 우선순위가 높은 data부터 하나씩 주는 구조
		pq.add(1); // PriorityQueue.add(data) : data를 pq에 추가(O(logN))
		pq.add(9);
		pq.add(5);
		pq.add(7);
		pq.add(6);
		
		pq.add(8);
		
//		pq.peek(); // PriorityQueue.peek() : pq에서 우선순위가 가장 높은 data를 '확인'
//		pq.remove(); // PriorityQueue.remove() : pq에서 우선순위가 가장 높은 data를 '추출'
		// PriorityQueue.isEmpty() : pq가 비워졌는가?
		// PriorityQueue.size() : pq에 있는 data 개수
		while(!pq.isEmpty()) {
			System.out.println(pq.remove());//(O(logN))
		}
		
	}
}